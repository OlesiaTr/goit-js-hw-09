{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,oBAMjC,SAASI,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEF,WAAUJ,UAEpBO,EAAO,CAAEH,WAAUJ,S,GAEpBA,E,IAZPJ,EAAKC,KAAKe,iBAAiB,UAgB3B,SAAkBC,GAChBA,EAAEC,iBAMF,IAJA,IAAIC,EAAQC,OAAOpB,EAAKI,MAAMiB,OACxBhB,EAAOe,OAAOpB,EAAKK,KAAKgB,OACxBf,EAASc,OAAOpB,EAAKM,OAAOe,OAEzBC,EAAW,EAAGA,GAAYhB,EAAQgB,GAAY,EAErDf,EAAce,EAAUH,GACrBI,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUJ,EAAKoB,EAALpB,MACjB,OAAON,EAAA2B,OAAOC,QAAQ,sBAAqCC,OAAfnB,EAAS,QAAYmB,OAANvB,EAAM,M,IAElEwB,OAAM,SAAAJ,G,IAAGhB,EAAQgB,EAARhB,SAAUJ,EAAKoB,EAALpB,MAClB,OAAON,EAAA2B,OAAOI,QAAQ,oBAAmCF,OAAfnB,EAAS,QAAYmB,OAANvB,EAAM,M,IAGnEe,GAASd,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', onSubmit);\n\n// Chooses whether to fulfill or reject the promise.\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  // Gets values from inputs.\n  let delay = Number(refs.delay.value);\n  const step = Number(refs.step.value);\n  const amount = Number(refs.amount.value);\n\n  for (let position = 1; position <= amount; position += 1) {\n    // Returns one promise that will be fulfilled or rejected after delay time.\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        return Notify.success(`Fullfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        return Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    // Adds delay on next step after each promise.\n    delay += step;\n  }\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","delay1","Number","value","position1","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.1869484d.js.map"}